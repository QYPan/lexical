通过调用 gethostent 可以找到给定计算机的主机信息

#include <netdb.h>

struct hostent *gethostent(void); // 若成功则返回指针，否则返回 NULL

void sethostent(int stayopen);
void endhostent(void);

获取网络名字和网络号

struct netent *getnetbyaddr(uint32_t net, int type);
struct netent *getnetbyname(const char *name);
struct netent *getnetent(void);

...

可以用 bind 函数将地址绑定到一个套接字

int bind(int sockfd, const struct sockaddr *addr, socklen_t len); // 若成功则返回 0，出错则返回 -1

可以调用函数 getsocketname 来发现绑定到一个套接字的地址

int getsocketname(int sockfd, struct sockaddr *restrict_addr, socklen_t *restrict_alenp); // 若成功则返回 0，出错则返回 -1

如果套接字已经和对方连接，调用 getpeername 来找到对方的地址

int getpeername(int sockfd, struct sockaddr *restrict_addr, socklen_t *restrict_alenp);
// 若成功则返回 0，出错则返回 -1

建立连接

int connect(int sockfd, const struct sockaddr *addr, socklen_t len); // 若成功则返回 0，出错则返回 -1

服务器调用 listen 来宣告可以接受连接请求

int listen(int sockfd, int backlog);

接受连接

int accept(int sockfd, struct sockaddr *restrict_addr, socklen_t *restrict_len);
 // 若成功则返回文件（套接字）描述符，出错则返回 -1
 
 数据传输
 
 ssize_t send(int sockfd, const void *buf, size_t nbytes, int flags);
 // 若成功则返回发送的字节数，出错则返回 -1
 
 ssize_t sendto(int sockfd, const void *buf, size_t nbytes, int flags,
                const struct sockaddr *destaddr, socklen_t destlen);  // 若成功则返回发送的字节数，出错则返回 -1


---------------------------------------------------------------------------------------------------
#include <sys/socket.h>

int socket(int domain, int type, int protocol); // 若成功则返回文件（套接字）描述符，否则返回 -1

int shutdown(int sockfd, int how); // 若成功则返回 0，否则返回 -1

如果 how 是 SHUT_RD（关闭读端），那么无法从套接字读取数据；如果是 SHUT_WR（关闭写端），那么无法使用
套接字发送数据；使用 SHUT_RDWR 则将同时无法读取和发送数据，它跟 close 是不同的

对于 TCP/IP 应用程序，提供了四个通用函数以实施在处理字节序和网络字节序之间的转换

#include <arpa/inet/h>

uint32_t htonl(uint32_t hostint32);
uint16_t htons(uint16_t hostint16); // 返回以网络字节序表示的16位整型数
uint32_t ntonl(uint32_t netint32);
uint16_t ntons(uint16_t netint16); // 返回以主机字节序表示的16位整型数